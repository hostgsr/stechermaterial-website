// Query TypeMap
import '@sanity/client'

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Project = {
  _id: string
  _type: 'project'
  _createdAt: string
  _updatedAt: string
  _rev: string
  artNumber?: string
  title?: string
  slug?: Slug
  technique?: string
  location?: string
  material?: string
  year?: string
  photos?: Array<{
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'image'
    _key: string
  }>
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type Home = {
  _id: string
  _type: 'home'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  imageGallery?: Array<{
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'image'
    _key: string
  }>
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Project
  | Slug
  | Home
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./sanity/lib/queries.ts
// Variable: homePageQuery
// Query: *[_type == "home"][0]{    _id,    _type,    title,    imageGallery[]{      ...,      "imageData": asset->metadata    }  }
export type HomePageQueryResult = {
  _id: string
  _type: 'home'
  title: string | null
  imageGallery: Array<{
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'image'
    _key: string
    imageData: SanityImageMetadata | null
  }> | null
} | null
// Variable: marqueeTextQuery
// Query: *[_type == "home"][0]{    marqueeText  }
export type MarqueeTextQueryResult = {
  marqueeText: null
} | null
// Variable: pagesBySlugQuery
// Query: *[_type == "page" && slug.current == $slug][0] {    _id,    _type,    body,    overview,    title,    "slug": slug.current,  }
export type PagesBySlugQueryResult = null
// Variable: projectBySlugQuery
// Query: *[_type == "project" && slug.current == $slug][0] {    _id,    _type,    artNumber,    title,    "slug": slug.current,    technique,    location,    material,    year,    photos[]{      ...,      "imageData": asset->metadata    }  }
export type ProjectBySlugQueryResult = {
  _id: string
  _type: 'project'
  artNumber: string | null
  title: string | null
  slug: string | null
  technique: string | null
  location: string | null
  material: string | null
  year: string | null
  photos: Array<{
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'image'
    _key: string
    imageData: SanityImageMetadata | null
  }> | null
} | null
// Variable: allProjectsQuery
// Query: *[_type == "project"] | order(year desc) {    _id,    _type,    artNumber,    title,    "slug": slug.current,    technique,    location,    material,    year,    photos[]{      ...,      "imageData": asset->metadata    }  }
export type AllProjectsQueryResult = Array<{
  _id: string
  _type: 'project'
  artNumber: string | null
  title: string | null
  slug: string | null
  technique: string | null
  location: string | null
  material: string | null
  year: string | null
  photos: Array<{
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'image'
    _key: string
    imageData: SanityImageMetadata | null
  }> | null
}>
// Variable: workBySlugQuery
// Query: *[_type == "work" && slug.current == $slug][0] {    _id,    _type,    title,    "slug": slug.current,    images[]{      ...,      "imageData": asset->metadata    },    descriptionMedium,    description,    year,    size,    location,    classification,    publications[]{      title,      year,      description,      file,      link    }  }
export type WorkBySlugQueryResult = null
// Variable: allWorksQuery
// Query: *[_type == "work"] | order(year desc) {    _id,    _type,    title,    "slug": slug.current,    images[]{      ...,      "imageData": asset->metadata    },    year,    classification,    size,    location  }
export type AllWorksQueryResult = Array<never>
// Variable: exhibitionBySlugQuery
// Query: *[_type == "exhibition" && slug.current == $slug][0] {    _id,    _type,    title,    "slug": slug.current,    date,    endDate,    isSolo,    isCurrent,      shortDescription,    photoCredits,    description,    location,    assignedWorks[]->{      _id,      title,      "slug": slug.current,      images[0]{        ...,        "imageData": asset->metadata      },      year,      classification    },    exhibitionPhotos[]{      ...,      "imageData": asset->metadata    }  }
export type ExhibitionBySlugQueryResult = null
// Variable: allExhibitionsQuery
// Query: *[_type == "exhibition"] | order(date desc) {    _id,    _type,    title,    "slug": slug.current,    date,    isCurrent,    isSolo,    shortDescription,    location,    exhibitionPhotos[0]{      ...,      "imageData": asset->metadata    }  }
export type AllExhibitionsQueryResult = Array<never>
// Variable: collectionBySlugQuery
// Query: *[_type == "collection" && slug.current == $slug][0] {    _id,    _type,    title,    "slug": slug.current,    date,    isPrivate,    shortDescription,    description,    location,    assignedWorks[]->{      _id,      title,      "slug": slug.current,      images[0]{        ...,        "imageData": asset->metadata      },      year,      classification    },    collectionPhotos[]{      ...,      "imageData": asset->metadata    }  }
export type CollectionBySlugQueryResult = null
// Variable: allCollectionsQuery
// Query: *[_type == "collection" && !isPrivate] | order(date desc) {    _id,    _type,    title,    "slug": slug.current,    date,    isPrivate,    shortDescription,    location,    collectionPhotos[0]{      ...,      "imageData": asset->metadata    }  }
export type AllCollectionsQueryResult = Array<never>
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{    _id,    _type,    footer,    menuItems[]{      _key,      ...@->{        _type,        "slug": slug.current,        title      }    },    ogImage{      ...,      "imageData": asset->metadata    },  }
export type SettingsQueryResult = null
// Variable: slugsByTypeQuery
// Query: *[_type == $type && defined(slug.current)]{"slug": slug.current}
export type SlugsByTypeQueryResult = Array<{
  slug: string | null
}>
// Variable: allPublicationsQuery
// Query: *[_type == "publication"] | order(year desc) {    _id,    _type,    title,    "slug": slug.current,    publicationTypes,    image{      ...,      "imageData": asset->metadata    },    year,    description,    file,    link  }
export type AllPublicationsQueryResult = Array<never>
// Variable: worksByYearQuery
// Query: *[_type == "home"][0]{    works2018[]->{      _id,      _type,      title,      "slug": slug.current,      images[]{        ...,        "imageData": asset->metadata      },      year,      classification,      size,      location    },    works2019[]->{      _id,      _type,      title,      "slug": slug.current,      images[]{        ...,        "imageData": asset->metadata      },      year,      classification,      size,      location    },    works2020[]->{      _id,      _type,      title,      "slug": slug.current,      images[]{        ...,        "imageData": asset->metadata      },      year,      classification,      size,      location    },    works2021[]->{      _id,      _type,      title,      "slug": slug.current,      images[]{        ...,        "imageData": asset->metadata      },      year,      classification,      size,      location    },    works2022[]->{      _id,      _type,      title,      "slug": slug.current,      images[]{        ...,        "imageData": asset->metadata      },      year,      classification,      size,      location    },    works2023[]->{      _id,      _type,      title,      "slug": slug.current,      images[]{        ...,        "imageData": asset->metadata      },      year,      classification,      size,      location    },    works2024[]->{      _id,      _type,      title,      "slug": slug.current,      images[]{        ...,        "imageData": asset->metadata      },      year,      classification,      size,      location    },    works2025[]->{      _id,      _type,      title,      "slug": slug.current,      images[]{        ...,        "imageData": asset->metadata      },      year,      classification,      size,      location    },    objectImagesWorks[]->{      _id,      _type,      title,      "slug": slug.current,      images[]{        ...,        "imageData": asset->metadata      },      year,      classification,      size,      location    },    paintingsWorks[]->{      _id,      _type,      title,      "slug": slug.current,      images[]{        ...,        "imageData": asset->metadata      },      year,      classification,      size,      location    },    drawingsWorks[]->{      _id,      _type,      title,      "slug": slug.current,      images[]{        ...,        "imageData": asset->metadata      },      year,      classification,      size,      location    },    sculpturesWorks[]->{      _id,      _type,      title,      "slug": slug.current,      images[]{        ...,        "imageData": asset->metadata      },      year,      classification,      size,      location    }  }
export type WorksByYearQueryResult = {
  works2018: null
  works2019: null
  works2020: null
  works2021: null
  works2022: null
  works2023: null
  works2024: null
  works2025: null
  objectImagesWorks: null
  paintingsWorks: null
  drawingsWorks: null
  sculpturesWorks: null
} | null

declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[_type == "home"][0]{\n    _id,\n    _type,\n    title,\n    imageGallery[]{\n      ...,\n      "imageData": asset->metadata\n    }\n  }\n': HomePageQueryResult
    '\n  *[_type == "home"][0]{\n    marqueeText\n  }\n': MarqueeTextQueryResult
    '\n  *[_type == "page" && slug.current == $slug][0] {\n    _id,\n    _type,\n    body,\n    overview,\n    title,\n    "slug": slug.current,\n  }\n': PagesBySlugQueryResult
    '\n  *[_type == "project" && slug.current == $slug][0] {\n    _id,\n    _type,\n    artNumber,\n    title,\n    "slug": slug.current,\n    technique,\n    location,\n    material,\n    year,\n    photos[]{\n      ...,\n      "imageData": asset->metadata\n    }\n  }\n': ProjectBySlugQueryResult
    '\n  *[_type == "project"] | order(year desc) {\n    _id,\n    _type,\n    artNumber,\n    title,\n    "slug": slug.current,\n    technique,\n    location,\n    material,\n    year,\n    photos[]{\n      ...,\n      "imageData": asset->metadata\n    }\n  }\n': AllProjectsQueryResult
    '\n  *[_type == "work" && slug.current == $slug][0] {\n    _id,\n    _type,\n    title,\n    "slug": slug.current,\n    images[]{\n      ...,\n      "imageData": asset->metadata\n    },\n    descriptionMedium,\n    description,\n    year,\n    size,\n    location,\n    classification,\n    publications[]{\n      title,\n      year,\n      description,\n      file,\n      link\n    }\n  }\n': WorkBySlugQueryResult
    '\n  *[_type == "work"] | order(year desc) {\n    _id,\n    _type,\n    title,\n    "slug": slug.current,\n    images[]{\n      ...,\n      "imageData": asset->metadata\n    },\n    year,\n    classification,\n    size,\n    location\n  }\n': AllWorksQueryResult
    '\n  *[_type == "exhibition" && slug.current == $slug][0] {\n    _id,\n    _type,\n    title,\n    "slug": slug.current,\n    date,\n    endDate,\n    isSolo,\n    isCurrent,  \n    shortDescription,\n    photoCredits,\n    description,\n    location,\n    assignedWorks[]->{\n      _id,\n      title,\n      "slug": slug.current,\n      images[0]{\n        ...,\n        "imageData": asset->metadata\n      },\n      year,\n      classification\n    },\n    exhibitionPhotos[]{\n      ...,\n      "imageData": asset->metadata\n    }\n  }\n': ExhibitionBySlugQueryResult
    '\n  *[_type == "exhibition"] | order(date desc) {\n    _id,\n    _type,\n    title,\n    "slug": slug.current,\n    date,\n    isCurrent,\n    isSolo,\n    shortDescription,\n    location,\n    exhibitionPhotos[0]{\n      ...,\n      "imageData": asset->metadata\n    }\n  }\n': AllExhibitionsQueryResult
    '\n  *[_type == "collection" && slug.current == $slug][0] {\n    _id,\n    _type,\n    title,\n    "slug": slug.current,\n    date,\n    isPrivate,\n    shortDescription,\n    description,\n    location,\n    assignedWorks[]->{\n      _id,\n      title,\n      "slug": slug.current,\n      images[0]{\n        ...,\n        "imageData": asset->metadata\n      },\n      year,\n      classification\n    },\n    collectionPhotos[]{\n      ...,\n      "imageData": asset->metadata\n    }\n  }\n': CollectionBySlugQueryResult
    '\n  *[_type == "collection" && !isPrivate] | order(date desc) {\n    _id,\n    _type,\n    title,\n    "slug": slug.current,\n    date,\n    isPrivate,\n    shortDescription,\n    location,\n    collectionPhotos[0]{\n      ...,\n      "imageData": asset->metadata\n    }\n  }\n': AllCollectionsQueryResult
    '\n  *[_type == "settings"][0]{\n    _id,\n    _type,\n    footer,\n    menuItems[]{\n      _key,\n      ...@->{\n        _type,\n        "slug": slug.current,\n        title\n      }\n    },\n    ogImage{\n      ...,\n      "imageData": asset->metadata\n    },\n  }\n': SettingsQueryResult
    '\n  *[_type == $type && defined(slug.current)]{"slug": slug.current}\n': SlugsByTypeQueryResult
    '\n  *[_type == "publication"] | order(year desc) {\n    _id,\n    _type,\n    title,\n    "slug": slug.current,\n    publicationTypes,\n    image{\n      ...,\n      "imageData": asset->metadata\n    },\n    year,\n    description,\n    file,\n    link\n  }\n': AllPublicationsQueryResult
    '\n  *[_type == "home"][0]{\n    works2018[]->{\n      _id,\n      _type,\n      title,\n      "slug": slug.current,\n      images[]{\n        ...,\n        "imageData": asset->metadata\n      },\n      year,\n      classification,\n      size,\n      location\n    },\n    works2019[]->{\n      _id,\n      _type,\n      title,\n      "slug": slug.current,\n      images[]{\n        ...,\n        "imageData": asset->metadata\n      },\n      year,\n      classification,\n      size,\n      location\n    },\n    works2020[]->{\n      _id,\n      _type,\n      title,\n      "slug": slug.current,\n      images[]{\n        ...,\n        "imageData": asset->metadata\n      },\n      year,\n      classification,\n      size,\n      location\n    },\n    works2021[]->{\n      _id,\n      _type,\n      title,\n      "slug": slug.current,\n      images[]{\n        ...,\n        "imageData": asset->metadata\n      },\n      year,\n      classification,\n      size,\n      location\n    },\n    works2022[]->{\n      _id,\n      _type,\n      title,\n      "slug": slug.current,\n      images[]{\n        ...,\n        "imageData": asset->metadata\n      },\n      year,\n      classification,\n      size,\n      location\n    },\n    works2023[]->{\n      _id,\n      _type,\n      title,\n      "slug": slug.current,\n      images[]{\n        ...,\n        "imageData": asset->metadata\n      },\n      year,\n      classification,\n      size,\n      location\n    },\n    works2024[]->{\n      _id,\n      _type,\n      title,\n      "slug": slug.current,\n      images[]{\n        ...,\n        "imageData": asset->metadata\n      },\n      year,\n      classification,\n      size,\n      location\n    },\n    works2025[]->{\n      _id,\n      _type,\n      title,\n      "slug": slug.current,\n      images[]{\n        ...,\n        "imageData": asset->metadata\n      },\n      year,\n      classification,\n      size,\n      location\n    },\n    objectImagesWorks[]->{\n      _id,\n      _type,\n      title,\n      "slug": slug.current,\n      images[]{\n        ...,\n        "imageData": asset->metadata\n      },\n      year,\n      classification,\n      size,\n      location\n    },\n    paintingsWorks[]->{\n      _id,\n      _type,\n      title,\n      "slug": slug.current,\n      images[]{\n        ...,\n        "imageData": asset->metadata\n      },\n      year,\n      classification,\n      size,\n      location\n    },\n    drawingsWorks[]->{\n      _id,\n      _type,\n      title,\n      "slug": slug.current,\n      images[]{\n        ...,\n        "imageData": asset->metadata\n      },\n      year,\n      classification,\n      size,\n      location\n    },\n    sculpturesWorks[]->{\n      _id,\n      _type,\n      title,\n      "slug": slug.current,\n      images[]{\n        ...,\n        "imageData": asset->metadata\n      },\n      year,\n      classification,\n      size,\n      location\n    }\n  }\n': WorksByYearQueryResult
  }
}
